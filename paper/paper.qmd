---
title: "GEMINI Programming Skills Test"
author: 
  - Bella MacLean
date: today
date-format: long
format: pdf
number-sections: true
---

```{r}
#| include: false
#| warning: false
#| message: false

library(tidyverse)
library(dplyr)
library(knitr)
install.packages("kableExtra")
library(kableExtra)
```


# Task One

Read in the csv files (admissions_surg.csv, admissions_med.csv and imaging.csv) and perform de-identification on all 3 files. De-identification is a common practice in health research in which an personal health identifer that identifies a patient is replaced with another unique ID for privacy
purposes.

```{r}
#| include: false
#| warning: false
#| message: false

# Read the datasets

admissions_surg <- read_csv(here::here("data/admissions_surg.csv"))
show_col_types = FALSE

admissions_med <- read_csv(here::here("data/admissions_med.csv"))
show_col_types = FALSE

imaging <- read_csv(here::here("data/imaging.csv"))
show_col_types = FALSE
```

```{r}
#| include: false
#| warning: false
#| message: false

# Compile a list of IDs
all_ids <- unique(c(admissions_surg$ID, admissions_med$ID))

# Create a dataframe with unique identifiers
q1b <- data.frame(ID = all_ids, DE_ID = seq_along(all_ids))

# Display the first 10 rows
head(q1b, 10)

# Check uniqueness of DE_ID
all(unique(q1b$DE_ID))  # Should return TRUE if all are unique

# Corrected code for merging and selecting columns
deidentified_surg <- merge(admissions_surg, q1b, by = "ID") |>
                     select(DE_ID, everything(), -ID)
deidentified_med <- merge(admissions_med, q1b, by = "ID") |>
                    select(DE_ID, everything(), -ID)
deidentified_imaging <- merge(imaging, q1b, by = "ID") |>
                        select(DE_ID, everything(), -ID)

# Display the first 5 rows of the new merged dataset
head(deidentified_surg, 5)
head(deidentified_med, 5)
head(deidentified_imaging, 5)
```

```{r}
#| echo: false
#| warning: false

# Display the first 5 rows of each de-identified dataset
kable(head(deidentified_med, 5), caption = "First 5 rows of De-identified Medical Admissions", format = "latex", booktabs = TRUE) |>
  kable_styling(font_size = 3.5)

kable(head(deidentified_med, 5), caption = "First 5 rows of De-identified Medical Admissions", format = "latex", booktabs = TRUE) |>
  kable_styling(font_size = 3.5)

kable(head(deidentified_imaging, 5), caption = "First 5 rows of De-identified Imaging Data", format = "latex", booktabs = TRUE) |>
  kable_styling(font_size = 4)
```

\newpage 

# Task Two

Create one data frame called admissions_img, consisting of all rows in admissions_surg and admissions_med, merged with the imaging data using DE_ID (retaining all DE_IDs from both).

```{r}
#| include: false
#| warning: false
#| message: false

library(readr)
library(here)
library(dplyr)

admissions_surg <- read_csv(here::here("data/admissions_surg.csv"))
admissions_med <- read_csv(here::here("data/admissions_med.csv"))
imaging <- read_csv(here::here("data/imaging.csv"))

# Compile a list of IDs from both admissions datasets
all_ids <- unique(c(admissions_surg$ID, admissions_med$ID))

# Create a dataframe with unique identifiers
q1b <- data.frame(ID = all_ids, DE_ID = seq_along(all_ids))

# Merge the deidentification dataframe with both admissions datasets
deidentified_surg <- merge(admissions_surg, q1b, by = "ID") |>
                     select(DE_ID, everything(), -ID)
deidentified_med <- merge(admissions_med, q1b, by = "ID") |>
                    select(DE_ID, everything(), -ID)
deidentified_imaging <- merge(imaging, q1b, by = "ID") |>
                        select(DE_ID, everything(), -ID)

# Combine surgical and medical admissions into one dataset
combined_admissions <- bind_rows(deidentified_surg, deidentified_med)

# Merge the combined admissions with the imaging data on DE_ID
admissions_img <- left_join(combined_admissions, deidentified_imaging, by = "DE_ID")

```

```{r}

# Display the first 5 rows of the new merged dataset
head(admissions_img, 5)

```


\newpage

# Task Three

In admissions_img, create a new length_of_stay variable defined as discharge date and time minus admission date and time (in days). Calculate the mean length_of_stay for each department.

```{r}
#| include: false
#| warning: false
#| message: false

library(dplyr)
library(lubridate)

# Assuming your dataframe is called admissions_img
admissions_img <- admissions_img |>
  mutate(
    # Combine ADMISSION.DATE and ADMISSION.TIME into one datetime object, specify format explicitly
    admission_datetime = as.POSIXct(paste(ADMISSION.DATE, format(ADMISSION.TIME, "%H:%M:%S")), format = "%Y-%m-%d %H:%M:%S", tz = "UTC"),
    # Combine DISCHARGE.DATE and DISCHARGE.TIME into one datetime object, specify format explicitly
    discharge_datetime = as.POSIXct(paste(DISCHARGE.DATE, format(DISCHARGE.TIME, "%H:%M:%S")), format = "%Y-%m-%d %H:%M:%S", tz = "UTC"),
    # Calculate length of stay in days
    length_of_stay = as.numeric(difftime(discharge_datetime, admission_datetime, units = "days"))
  )

# Calculate the mean length of stay for each department, assuming you have a Department column
mean_length_of_stay_by_dept <- admissions_img |>
  group_by(DEPARTMENT) |>
  summarise(
    Mean_Length_of_Stay = mean(length_of_stay, na.rm = TRUE),
    .groups = 'drop'  # Drop grouping structure after summarization
  )
```

```{r}
# Display the result
mean_length_of_stay_by_dept
```

# Task Four

In imaging, filter to the first performed test for each test_name and save the resulting data frame as q4_df. Then, transform the data into wide format such that each test_name becomes a column displaying the performed_date of that test (see example table below). Display the head of the table.

```{r}
#| include: false
#| warning: false
#| message: false

library(dplyr)
library(tidyr)
library(readr)

# Filter to the first performed test for each test_name
q4_df <- imaging |>
  arrange(test_name, performed_date, performed_time) |>  # Arrange to ensure we're getting the first test chronologically
  group_by(test_name) |>
  slice_head(n = 1) |>
  ungroup()
```

```{r}
# Display the head of the wide format table
head(q4_df)
```

